# -*- coding: utf-8 -*-
"""trained_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uUJgdMqjkGvZEDDlpUtcpAxb_G4VwjG4
"""



# train_model.py
import os, json, pickle
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

MODEL_DIR = "model"
os.makedirs(MODEL_DIR, exist_ok=True)

PERSONALITY_TYPES = {
    "Sweet Adventurer": {
        "description": "You love desserts and sweet food adventures!",
        "traits": ["Sweet tooth", "Adventurous eater", "Creative"],
        "favorite_foods": ["Fusion desserts", "Chocolates", "Pastries"],
    },
    "Spice Warrior": {
        "description": "You crave heat and bold flavors!",
        "traits": ["Spice lover", "Bold", "Fearless"],
        "favorite_foods": ["Hot curries", "Spicy ramen", "Chili dishes"],
    },
    "Comfort Seeker": {
        "description": "You prefer familiar and cozy meals.",
        "traits": ["Homey", "Simple", "Nostalgic"],
        "favorite_foods": ["Mac and cheese", "Dal chawal", "Soup"],
    },
    "Health Guru": {
        "description": "You eat for energy and health.",
        "traits": ["Fitness-focused", "Balanced", "Mindful"],
        "favorite_foods": ["Salads", "Smoothie bowls", "Plant-based meals"],
    },
    "Social Foodie": {
        "description": "Food is your social connector.",
        "traits": ["Trendy", "Friendly", "Outgoing"],
        "favorite_foods": ["Brunch", "Street food", "Tapas"],
    },
    "Late Night Explorer": {
        "description": "You discover food when the world sleeps.",
        "traits": ["Night owl", "Creative", "Experimental"],
        "favorite_foods": ["Burgers", "Pizza", "Midnight snacks"],
    },
    "Balanced Foodie": {
        "description": "You enjoy a mix of everything.",
        "traits": ["Balanced", "Curious", "Moderate"],
        "favorite_foods": ["Variety", "Balanced meals", "Seasonal dishes"],
    },
    "Texture Lover": {
        "description": "For you, food is about mouthfeel!",
        "traits": ["Crunchy fan", "Unique", "Sensory eater"],
        "favorite_foods": ["Crispy snacks", "Layered desserts", "Chewy foods"],
    },
}

FEATURE_NAMES = [
    'sweet_preference', 'spice_tolerance', 'texture_preference', 'flavor_intensity',
    'period_cravings', 'stress_eating', 'gaming_snacks', 'hearty_meals',
    'late_night', 'stress_response', 'celebration', 'weather_craving',
    'adventure_level', 'cooking_preference', 'social_eating', 'quick_meal', 'budget_priority',
    'instagram_behavior', 'comfort_food', 'food_risk'
]

def train_from_csv(csv_path: str, model_dir: str = MODEL_DIR):
    df = pd.read_csv(csv_path)
    if "Personality" not in df.columns:
        raise ValueError("CSV must include a 'Personality' column.")

    # Basic sanity: ensure all features exist
    missing = [f for f in FEATURE_NAMES if f not in df.columns]
    if missing:
        raise ValueError(f"CSV missing required feature columns: {missing}")

    X = df[FEATURE_NAMES]
    y = df["Personality"]

    # Encode labels
    personality_names = sorted(y.unique().tolist())
    personality_to_id = {name: idx for idx, name in enumerate(personality_names)}
    id_to_personality = {idx: name for name, idx in personality_to_id.items()}
    y_enc = y.map(personality_to_id)

    X_train, X_test, y_train, y_test = train_test_split(
        X, y_enc, test_size=0.2, random_state=42, stratify=y_enc
    )

    model = RandomForestClassifier(n_estimators=200, max_depth=12, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    print(f"âœ… Accuracy: {acc:.2f}")
    print("\nClassification Report:\n",
          classification_report(y_test, y_pred, target_names=[id_to_personality[i] for i in sorted(id_to_personality)]))

    # Save model
    with open(os.path.join(model_dir, "trained_model.pkl"), "wb") as f:
        pickle.dump(model, f)

    # Save training data (for matches)
    training_data = {
        "users": [
            {"id": int(i), "features": [float(df.loc[i, col]) for col in FEATURE_NAMES], "personality": str(df.loc[i, "Personality"])}
            for i in df.index
        ],
        "feature_names": FEATURE_NAMES,
    }
    with open(os.path.join(model_dir, "training_data.json"), "w") as f:
        json.dump(training_data, f, indent=2)

    # Save label map
    with open(os.path.join(model_dir, "label_map.json"), "w") as f:
        json.dump({"id_to_personality": id_to_personality, "personality_to_id": personality_to_id}, f, indent=2)

    # Save personality types (descriptions)
    with open(os.path.join(model_dir, "personality_types.json"), "w") as f:
        json.dump(PERSONALITY_TYPES, f, indent=2)

    print(f"\nðŸŽ‰ Training complete. Artifacts saved to '{model_dir}'.")

if __name__ == "__main__":
    default_csv = "/content/food_personality_dataset.csv"
    if not os.path.exists(default_csv):
        raise SystemExit(f"CSV not found: {default_csv}. Place your dataset or pass a path in code.")
    train_from_csv(default_csv)

